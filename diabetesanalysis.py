# -*- coding: utf-8 -*-
"""diabetesAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1guOgFz1AkRbhEUk6h0M04U4jlnXo3M4P
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Example: Load dataset
df = pd.read_csv("diabetes.csv")


selected_cols=['Glucose','BMI','Age']
zero_col=df[selected_cols]==0
zero_count=zero_col.sum()
print(zero_count)

for col in selected_cols:
  median=df[col].median()
  df[col]=df[col].replace(0,median)

print((df[selected_cols]==0).sum())

X=df[selected_cols].values
y=df['Outcome'].values


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

df[selected_cols].head()

split=int(0.8*len(X_scaled))
X_train,X_test=X_scaled[:split],X_scaled[split:]
y_train,y_test=y[:split],y[split:]

def sigmoid(z):
    return 1 / (1 + np.exp(-z))


def compute_loss(y, predictions):
    epsilon = 1e-5  # to prevent log(0)
    return -np.mean(y * np.log(predictions + epsilon) + (1 - y) * np.log(1 - predictions + epsilon))


def train(X, y, lr=0.01, epochs=1000):
    m, n = X.shape
    weights = np.zeros((n, 1))
    bias = 0
    losses = []

    for epoch in range(epochs):
        z = np.dot(X, weights) + bias  # shape (m, 1)
        predictions = sigmoid(z)       # shape (m, 1)

        # Compute loss
        loss = compute_loss(y, predictions)
        losses.append(loss)

        # Gradients
        dw = np.dot(X.T, (predictions - y)) / m
        db = np.sum(predictions - y) / m

        # Update weights
        weights -= lr * dw
        bias -= lr * db

        # Print every 100 epochs
        if epoch % 100 == 0:
            print(f"Epoch {epoch} Loss: {loss:.4f}")

    return weights, bias, losses

weights, bias, losses = train(X_train, y_train.reshape(-1, 1), lr=0.01, epochs=2000)
print(f"weights={weights}")
print(f"bias={bias}")
print(f"losses={losses[-1]}")

plt.plot(losses)
plt.title("Loss Over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Binary Crossentropy Loss")
plt.grid(True)
plt.show()

z = np.linspace(-10, 10, 100)
plt.plot(z, sigmoid(z))
plt.title("Sigmoid Function")
plt.xlabel("z")
plt.ylabel("sigmoid(z)")
plt.grid(True)
plt.show()

import joblib
joblib.dump({'weights': weights, 'bias': bias, 'scaler': scaler, 'losses': losses}, 'logistic_model.pkl')